# This is a comment.

~STATES~
# States need to be seperated by a comma or a new-line.
# One-dimensional arrays allowed.
# Negative range allowed.

one_state
many_states[1..3]
another_many_states[-1..1]	# Can have negative index too.

~PARTITIONS~
# Each partition starts with { and ends with }
# Write partitions seperated by comma ',' or one in a line
# All examples below work.

{one_state, many_states[1] }
{
many_states[2],another_many_states[-1]
},{
many_states[3]
another_many_states[0..1]
}

~INITIAL STATE~
one_state

~ALPHABET~
# Rules exactly like the states.
a,b
c[1..2]

~TRANSITION FUNCTION~
# Note that this is a function and has its properties.
# * can be used to specify default behavior.

one_state = a : many_states[1] | b : many_states[2] | c[1] : many_states[3] | c[2] : another_many_states[0]
many_states[1] = * : many_states[2]
many_states[2] = * : many_states[3]
many_states[3] = * : one_state
another_many_states[0] = a : another_many_states[-1] | b : another_many_states[1] | * : another_many_states[0]
another_many_states[-1] = * : one_state
another_many_states[1] = * : one_state

~ATOMIC PROPOSITIONS~
# Define like the ~STATES~
win,lose

~LABELING FUNCTION~
# Format. state = labels seperated by seperator '|'
one_state = win | lose
another_many_states[-1] = lose
another_many_states[1] = win
